/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.mazarini.resa.data.network.model.travelplanner.unverified

import com.mazarini.resa.data.network.model.travelplanner.journeys.response.TransportMode
import com.mazarini.resa.data.network.model.travelplanner.journeys.response.TransportSubMode
import com.squareup.moshi.Json

/**
 * Information about a line of a departure or arrival service journey.
 *
 * @param gid 16-digit Västtrafik line gid.
 * @param name The line name.
 * @param shortName The short name of the line, usually 5 characters or less.
 * @param designation The designation of the line.
 * @param backgroundColor The background color of the line symbol.
 * @param foregroundColor The foreground color of the line symbol.
 * @param borderColor The border color of the line symbol.
 * @param transportMode 
 * @param transportSubMode 
 * @param isWheelchairAccessible Flag indicating if the line is wheelchair accessible.
 */


data class VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsLineApiModel (

    /* 16-digit Västtrafik line gid. */
    @Json(name = "gid")
    val gid: kotlin.String? = null,

    /* The line name. */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* The short name of the line, usually 5 characters or less. */
    @Json(name = "shortName")
    val shortName: kotlin.String? = null,

    /* The designation of the line. */
    @Json(name = "designation")
    val designation: kotlin.String? = null,

    /* The background color of the line symbol. */
    @Json(name = "backgroundColor")
    val backgroundColor: kotlin.String? = null,

    /* The foreground color of the line symbol. */
    @Json(name = "foregroundColor")
    val foregroundColor: kotlin.String? = null,

    /* The border color of the line symbol. */
    @Json(name = "borderColor")
    val borderColor: kotlin.String? = null,

    @Json(name = "transportMode")
    val transportMode: TransportMode? = null,

    @Json(name = "transportSubMode")
    val transportSubMode: TransportSubMode? = null,

    /* Flag indicating if the line is wheelchair accessible. */
    @Json(name = "isWheelchairAccessible")
    val isWheelchairAccessible: kotlin.Boolean? = null

)

